import{s as ae,r as g,O as G,v as le,x as _,I as ne,J as se,S as re,T as ue,U as ie,K as de,L as ce,G as me,Z as pe,_ as _e,l as fe,o as c,c as v,e as o,w as n,u as s,W as C,X as V,A as h,z as ye,i as k,j as p,$ as we,a0 as ge,a1 as ve,a2 as he,a3 as ke}from"./vendor.9334939d.js";/* empty css                *//* empty css                     */import{g as S}from"./geoFeatures.22dc769d.js";/* empty css               */import{u as be}from"./index.cc6e6be4.js";import{u as xe}from"./survey.d4889153.js";const Ce={class:"main centered-main"},Ve=p(" Remove Expiration "),Ae=p(" Add Custom Geographic Constraint "),Ee=k("a",{href:"https://geojson.io/",target:"_blank"}," geojson.io ",-1),Se=p(" Add Custom Geographic Constraint "),De={class:"question-box-no",style:{"margin-bottom":"16px"}},Be=k("h3",{style:{"margin-right":"12px"}},"Questions",-1),Oe=p("Add Question"),Te={class:"question-box-no"},Ue={style:{margin:"0 12px"}},je=p(" Delete "),Fe=p(" Add Answer "),Ie=p(" Create Survey "),Le={setup(Qe){const A={},b=be(),{getSurveys:Y,createSurvey:$,getCategories:K}=xe(),M=ae(),E=g([]),D=g([]),B=g([]),f={lastId:3,1:3,2:3},y=g([]),l=G({name:"",description:"",categoryId:"",expireDate:null,geoFeatures:[],questions:[{question_id:1,question_text:"Question 1",answers:[{answer_id:1,answer_text:"Answer 1"},{answer_id:2,answer_text:"Answer 2"}]},{question_id:2,question_text:"Question 2",answers:[{answer_id:1,answer_text:"Answer 1"},{answer_id:2,answer_text:"Answer 2"}]}]}),O=Object.keys(S),x=g(!1),u=G({name:"",geojson:""}),T=(t,e,r)=>{const i=t[e];t[e]=t[r],t[r]=i},N=t=>{l.questions.splice(t,1)},L=()=>{const t=f.lastId;f[t]=3,f.lastId++,l.questions.push({question_id:t,question_text:"Question "+t,answers:[{answer_id:1,answer_text:"Answer 1"},{answer_id:2,answer_text:"Answer 2"}]})};le(async()=>{if(!!b.access.token){try{E.value=await K(b.access.token)}catch(t){return console.error(t),_.alert("An unknown error happened while trying to retrieve categories...","Error",{confirmButtonText:"OK"})}for await(const t of E.value)D.value.push({id:t.id,text:t.name,value:t.name});await z()}});async function z(){B.value=[];let t;try{t=await Y(b.access.token)}catch(e){return console.error(e),_.alert("An unknown error happened while trying to retrieve list of surveys...","Error",{confirmButtonText:"OK"})}await J(t)}async function J(t){for await(const e of t.results){const r=E.value.filter(i=>i.id===e.categoryId);B.value.push({id:e.id,name:e.name,description:e.description,categoryId:e.categoryId,category:r.length?r[0].name:"Unknown Category",submissionCount:e.submissionCount})}}function U(t,e){e==="up"&&t===0||e==="down"&&t===l.questions.length-1||(e==="up"?T(l.questions,t,t-1):e==="down"&&T(l.questions,t,t+1))}function P(t,e){l.questions[t].answers.splice(e,1)}function R(t){const e=f[l.questions[t].question_id];f[l.questions[t].question_id]++,l.questions[t].answers.push({answer_id:e,answer_text:"Answer "+e})}function W(){if(!u.name||!u.geojson)return _.alert("Please fill all areas!","Error",{confirmButtonText:"OK"});let t={};try{t.name=u.name;const e=JSON.parse(u.geojson);t.type=e.features[0].geometry.type,t.coordinates=e.features[0].geometry.coordinates}catch(e){return _.alert("An error happened while trying to parse your input: "+e.message,"Error",{confirmButtonText:"OK"})}A[u.name]=t,O.push(u.name),y.value.push(u.name),u.name="",u.geojson="",x.value=!1}async function X(){if(l.geoFeatures=[],y.value.length>0)for(const e of y.value)Object.keys(S).includes(e)?l.geoFeatures.push(S[e]):Object.keys(A).includes(e)&&l.geoFeatures.push(A[e]);let t;try{t=await $(b.access.token,l)}catch(e){console.error(e);let r="An unknown error happened while trying to create the survey...";return e.response&&e.response.data.message&&(r=e.response.data.message),_.alert(r,"Error",{confirmButtonText:"OK"})}console.log(t),_.alert("Survey created successfully.","Success!",{confirmButtonText:"OK",callback:()=>{M.push("list-surveys")}})}return(t,e)=>{const r=ne,i=se,j=re,F=ue,Z=ie,d=de,I=ce,H=me,ee=pe,te=_e,oe=fe;return c(),v("div",Ce,[o(oe,{class:"scrollbar-box"},{default:n(()=>[o(I,{model:s(l),"label-position":"left"},{default:n(()=>[o(i,{label:"Name","label-width":"180px"},{default:n(()=>[o(r,{modelValue:s(l).name,"onUpdate:modelValue":e[0]||(e[0]=a=>s(l).name=a),autocomplete:"off"},null,8,["modelValue"])]),_:1}),o(i,{label:"Description","label-width":"180px"},{default:n(()=>[o(r,{modelValue:s(l).description,"onUpdate:modelValue":e[1]||(e[1]=a=>s(l).description=a),autocomplete:"off"},null,8,["modelValue"])]),_:1}),o(i,{label:"Category","label-width":"180px"},{default:n(()=>[o(F,{modelValue:s(l).categoryId,"onUpdate:modelValue":e[2]||(e[2]=a=>s(l).categoryId=a),placeholder:"Please select a category"},{default:n(()=>[(c(!0),v(C,null,V(D.value,a=>(c(),h(j,{key:a.id,label:a.value,value:a.id},null,8,["label","value"]))),128))]),_:1},8,["modelValue"])]),_:1}),o(i,{label:"Expiration Date","label-width":"180px"},{default:n(()=>[o(Z,{modelValue:s(l).expireDate,"onUpdate:modelValue":e[3]||(e[3]=a=>s(l).expireDate=a),type:"date",placeholder:"Pick a day",format:"YYYY/MM/DD","value-format":"YYYY-MM-DD"},null,8,["modelValue"]),o(d,{style:{"margin-left":"1em"},onClick:e[4]||(e[4]=a=>s(l).expireDate=null)},{default:n(()=>[Ve]),_:1})]),_:1}),o(i,{label:"Geographic Constraints","label-width":"180px"},{default:n(()=>[o(F,{modelValue:y.value,"onUpdate:modelValue":e[5]||(e[5]=a=>y.value=a),multiple:"",placeholder:"Select",style:{width:"240px"}},{default:n(()=>[(c(!0),v(C,null,V(s(O),a=>(c(),h(j,{key:a,label:a,value:a},null,8,["label","value"]))),128))]),_:1},8,["modelValue"]),o(d,{style:{"margin-left":"1em"},onClick:e[6]||(e[6]=a=>x.value=!x.value)},{default:n(()=>[Ae]),_:1})]),_:1}),x.value?(c(),h(i,{key:0,label:"Add Custom Constraint","label-width":"180px"},{default:n(()=>[Ee,o(r,{modelValue:s(u).name,"onUpdate:modelValue":e[7]||(e[7]=a=>s(u).name=a),placeholder:"Custom constraint name"},null,8,["modelValue"]),o(r,{modelValue:s(u).geojson,"onUpdate:modelValue":e[8]||(e[8]=a=>s(u).geojson=a),rows:2,type:"textarea",placeholder:"GeoJSON"},null,8,["modelValue"]),o(d,{onClick:W},{default:n(()=>[Se]),_:1})]),_:1})):ye("",!0)]),_:1},8,["model"]),k("div",De,[Be,o(d,{onClick:L},{default:n(()=>[Oe]),_:1})]),o(te,{style:{"padding-left":"0"}},{default:n(()=>[(c(!0),v(C,null,V(s(l).questions,(a,w)=>(c(),h(ee,{key:a.question_id,center:""},{default:n(()=>[o(H,null,{default:n(()=>[k("div",Te,[o(d,{type:"primary",icon:s(we),size:"small",circle:"",onClick:m=>U(w,"up")},null,8,["icon","onClick"]),o(d,{type:"primary",icon:s(ge),size:"small",circle:"",onClick:m=>U(w,"down")},null,8,["icon","onClick"]),k("h4",Ue," Question #"+ve(a.question_id),1),o(d,{type:"danger",icon:s(he),size:"small",circle:"",onClick:m=>N(w)},null,8,["icon","onClick"])]),o(I,{ref_for:!0,ref:"formRef",model:a,"label-width":"120px","label-position":"left",style:{"margin-top":"1rem"}},{default:n(()=>[o(i,{prop:"name",label:"Question"},{default:n(()=>[o(r,{modelValue:a.question_text,"onUpdate:modelValue":m=>a.question_text=m},null,8,["modelValue","onUpdate:modelValue"])]),_:2},1024),(c(!0),v(C,null,V(a.answers,(m,Q)=>(c(),h(i,{key:m.key,label:"Answer",prop:"answers."+Q+".value"},{default:n(()=>[o(r,{modelValue:m.answer_text,"onUpdate:modelValue":q=>m.answer_text=q},null,8,["modelValue","onUpdate:modelValue"]),o(d,{style:{"margin-top":"0.5rem"},onClick:ke(q=>P(w,Q),["prevent"])},{default:n(()=>[je]),_:2},1032,["onClick"])]),_:2},1032,["prop"]))),128)),o(i,null,{default:n(()=>[o(d,{onClick:m=>R(w)},{default:n(()=>[Fe]),_:2},1032,["onClick"])]),_:2},1024)]),_:2},1032,["model"])]),_:2},1024)]),_:2},1024))),128))]),_:1}),o(d,{type:"primary",onClick:X},{default:n(()=>[Ie]),_:1})]),_:1})])}}};export{Le as default};
